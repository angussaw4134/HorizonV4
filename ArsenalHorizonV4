--// Dependencies
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

--// Cache
local select = select
local pcall, getgenv, next, Vector2, mathclamp, type, mousemoverel = select(1, pcall, getgenv, next, Vector2.new, math.clamp, type, mousemoverel or (Input and Input.MouseMove))

--// Preventing Multiple Processes
pcall(function()
	getgenv().Aimbot.Functions:Exit()
end)

--// Environment
getgenv().Aimbot = {}
local Environment = getgenv().Aimbot

--// Services
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

--// Variables
local RequiredDistance, Typing, Running, Animation, ServiceConnections = 2000, false, false, nil, {}

--// Script Settings
Environment.Settings = {
	Enabled = true,
	TeamCheck = false,
	AliveCheck = false,
	WallCheck = true,
	Sensitivity = 0.01,
	ThirdPerson = false,
	ThirdPersonSensitivity = 3,
	TriggerKey = "MouseButton2",
	Toggle = false,
	LockPart = "Head"
}

Environment.FOVSettings = {
	Enabled = true,
	Visible = true,
	Amount = 230,
	Color = Color3.fromRGB(255, 255, 255),
	LockedColor = Color3.fromRGB(255, 70, 70),
	Transparency = 0.5,
	Sides = 60,
	Thickness = 1,
	Filled = false
}

Environment.FOVCircle = Drawing.new("Circle")

--// ESP State
getgenv().ESPEnabled = {
    Box = false,
    Highlight = false,
    Name = false
}

local ESPBoxes, ESPNames, ESPHighlights = {}, {}, {}

local function RemoveESP(player)
    if ESPBoxes[player] then ESPBoxes[player]:Remove() ESPBoxes[player] = nil end
    if ESPNames[player] then ESPNames[player]:Remove() ESPNames[player] = nil end
    if ESPHighlights[player] then ESPHighlights[player]:Destroy() ESPHighlights[player] = nil end
end

local function CancelLock()
	Environment.Locked = nil
	if Animation then Animation:Cancel() end
	Environment.FOVCircle.Color = Environment.FOVSettings.Color
end

local function GetClosestPlayer()
	if not Environment.Locked then
		RequiredDistance = Environment.FOVSettings.Amount or 2000
		for _, v in next, Players:GetPlayers() do
			if v ~= LocalPlayer then
				if v.Character and v.Character:FindFirstChild(Environment.Settings.LockPart) and v.Character:FindFirstChildOfClass("Humanoid") then
					if Environment.Settings.TeamCheck and v.Team == LocalPlayer.Team then continue end
					if Environment.Settings.AliveCheck and v.Character:FindFirstChildOfClass("Humanoid").Health <= 0 then continue end
					if Environment.Settings.WallCheck and #(Camera:GetPartsObscuringTarget({v.Character[Environment.Settings.LockPart].Position}, v.Character:GetDescendants())) > 0 then continue end
					local Vector, OnScreen = Camera:WorldToViewportPoint(v.Character[Environment.Settings.LockPart].Position)
					local Distance = (Vector2(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2(Vector.X, Vector.Y)).Magnitude
					if Distance < RequiredDistance and OnScreen then
						RequiredDistance = Distance
						Environment.Locked = v
					end
				end
			end
		end
	elseif (Vector2(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2(Camera:WorldToViewportPoint(Environment.Locked.Character[Environment.Settings.LockPart].Position).X, Camera:WorldToViewportPoint(Environment.Locked.Character[Environment.Settings.LockPart].Position).Y)).Magnitude > RequiredDistance then
		CancelLock()
	end
end

ServiceConnections.TypingStartedConnection = UserInputService.TextBoxFocused:Connect(function()
	Typing = true
end)

ServiceConnections.TypingEndedConnection = UserInputService.TextBoxFocusReleased:Connect(function()
	Typing = false
end)

local function Load()
	ServiceConnections.RenderSteppedConnection = RunService.RenderStepped:Connect(function()
		if Environment.FOVSettings.Enabled and Environment.Settings.Enabled then
			Environment.FOVCircle.Radius = Environment.FOVSettings.Amount
			Environment.FOVCircle.Thickness = Environment.FOVSettings.Thickness
			Environment.FOVCircle.Filled = Environment.FOVSettings.Filled
			Environment.FOVCircle.NumSides = Environment.FOVSettings.Sides
			Environment.FOVCircle.Color = Environment.FOVSettings.Color
			Environment.FOVCircle.Transparency = Environment.FOVSettings.Transparency
			Environment.FOVCircle.Visible = Environment.FOVSettings.Visible
			Environment.FOVCircle.Position = Vector2(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
		else
			Environment.FOVCircle.Visible = false
		end

		if Running and Environment.Settings.Enabled then
			GetClosestPlayer()
			if Environment.Locked then
				if Environment.Settings.ThirdPerson then
					Environment.Settings.ThirdPersonSensitivity = mathclamp(Environment.Settings.ThirdPersonSensitivity, 0.1, 5)
					local Vector = Camera:WorldToViewportPoint(Environment.Locked.Character[Environment.Settings.LockPart].Position)
					mousemoverel((Vector.X - UserInputService:GetMouseLocation().X) * Environment.Settings.ThirdPersonSensitivity, (Vector.Y - UserInputService:GetMouseLocation().Y) * Environment.Settings.ThirdPersonSensitivity)
				else
					if Environment.Settings.Sensitivity > 0 then
						Animation = TweenService:Create(Camera, TweenInfo.new(Environment.Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(Camera.CFrame.Position, Environment.Locked.Character[Environment.Settings.LockPart].Position)})
						Animation:Play()
					else
						Camera.CFrame = CFrame.new(Camera.CFrame.Position, Environment.Locked.Character[Environment.Settings.LockPart].Position)
					end
				end
				Environment.FOVCircle.Color = Environment.FOVSettings.LockedColor
			end
		end
	end)

	ServiceConnections.InputBeganConnection = UserInputService.InputBegan:Connect(function(Input)
		if not Typing then
			pcall(function()
				if Input.KeyCode == Enum.KeyCode[Environment.Settings.TriggerKey] then
					if Environment.Settings.Toggle then
						Running = not Running
						if not Running then CancelLock() end
					else
						Running = true
					end
				end
			end)
			pcall(function()
				if Input.UserInputType == Enum.UserInputType[Environment.Settings.TriggerKey] then
					if Environment.Settings.Toggle then
						Running = not Running
						if not Running then CancelLock() end
					else
						Running = true
					end
				end
			end)
		end
	end)

	ServiceConnections.InputEndedConnection = UserInputService.InputEnded:Connect(function(Input)
		if not Typing then
			if not Environment.Settings.Toggle then
				pcall(function()
					if Input.KeyCode == Enum.KeyCode[Environment.Settings.TriggerKey] then
						Running = false; CancelLock()
					end
				end)
				pcall(function()
					if Input.UserInputType == Enum.UserInputType[Environment.Settings.TriggerKey] then
						Running = false; CancelLock()
					end
				end)
			end
		end
	end)
end

Environment.Functions = {}

function Environment.Functions:Exit()
	for _, v in next, ServiceConnections do
		v:Disconnect()
	end
	if Environment.FOVCircle.Remove then Environment.FOVCircle:Remove() end
	getgenv().Aimbot.Functions = nil
	getgenv().Aimbot = nil
end

function Environment.Functions:Restart()
	for _, v in next, ServiceConnections do
		v:Disconnect()
	end
	Load()
end

function Environment.Functions:ResetSettings()
	Environment.Settings = {
		Enabled = true,
		TeamCheck = false,
		AliveCheck = true,
		WallCheck = false,
		Sensitivity = 0,
		ThirdPerson = false,
		ThirdPersonSensitivity = 3,
		TriggerKey = "MouseButton2",
		Toggle = false,
		LockPart = "Head"
	}
	Environment.FOVSettings = {
		Enabled = true,
		Visible = true,
		Amount = 90,
		Color = Color3.fromRGB(255, 255, 255),
		LockedColor = Color3.fromRGB(255, 70, 70),
		Transparency = 0.5,
		Sides = 60,
		Thickness = 1,
		Filled = false
	}
end

Load()

--// Rayfield GUI
local Window = Rayfield:CreateWindow({
	Name = "Horizon Aimbot V4.1",
	LoadingTitle = "Initializing...",
	LoadingSubtitle = "by Horizon Systems",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "HorizonHub",
		FileName = "Settings"
	}
})

local AimbotTab = Window:CreateTab("Aimbot", 4483362458)
AimbotTab:CreateToggle({ Name = "Enable Aimbot", CurrentValue = Environment.Settings.Enabled, Callback = function(v) Environment.Settings.Enabled = v end })
AimbotTab:CreateToggle({ Name = "Team Check", CurrentValue = Environment.Settings.TeamCheck, Callback = function(v) Environment.Settings.TeamCheck = v end })
AimbotTab:CreateToggle({ Name = "Alive Check", CurrentValue = Environment.Settings.AliveCheck, Callback = function(v) Environment.Settings.AliveCheck = v end })
AimbotTab:CreateToggle({ Name = "Wall Check", CurrentValue = Environment.Settings.WallCheck, Callback = function(v) Environment.Settings.WallCheck = v end })
AimbotTab:CreateSlider({ Name = "Smoothing", Range = {0,1}, Increment = 0.01, Suffix = "s", CurrentValue = Environment.Settings.Sensitivity, Callback = function(v) Environment.Settings.Sensitivity = v end })
AimbotTab:CreateToggle({ Name = "Toggle Mode", CurrentValue = Environment.Settings.Toggle, Callback = function(v) Environment.Settings.Toggle = v end })
AimbotTab:CreateDropdown({ Name = "Lock Part", Options = {"Head", "HumanoidRootPart", "Torso"}, CurrentOption = {Environment.Settings.LockPart}, Callback = function(o) Environment.Settings.LockPart = o[1] end })
AimbotTab:CreateButton({ Name = "Reset All Settings", Callback = function() Environment.Functions:ResetSettings() end })

local FOVTab = Window:CreateTab("FOV", 4483362458)
FOVTab:CreateToggle({ Name = "Enable FOV", CurrentValue = Environment.FOVSettings.Enabled, Callback = function(v) Environment.FOVSettings.Enabled = v end })
FOVTab:CreateToggle({ Name = "Show FOV Circle", CurrentValue = Environment.FOVSettings.Visible, Callback = function(v) Environment.FOVSettings.Visible = v end })
FOVTab:CreateSlider({ Name = "FOV Radius", Range = {10,500}, Increment = 1, Suffix = "px", CurrentValue = Environment.FOVSettings.Amount, Callback = function(v) Environment.FOVSettings.Amount = v end })

local ESPTab = Window:CreateTab("ESP", 4483362458)

-- External ESPs
local isCornerLoaded, isSkeletonLoaded = false, false
local cornerESP, skeletonESP = nil, nil

ESPTab:CreateToggle({
	Name = "Box ESP (Built-in)",
	CurrentValue = false,
	Callback = function(v)
		getgenv().ESPEnabled.Box = v
	end
})

ESPTab:CreateToggle({
	Name = "Highlight ESP",
	CurrentValue = false,
	Callback = function(v)
		getgenv().ESPEnabled.Highlight = v
	end
})

ESPTab:CreateToggle({
	Name = "Name ESP",
	CurrentValue = false,
	Callback = function(v)
		getgenv().ESPEnabled.Name = v
	end
})

ESPTab:CreateToggle({
	Name = "Corner Box ESP (External)",
	CurrentValue = false,
	Callback = function(v)
		if v and not isCornerLoaded then
			cornerESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/Blissful4992/ESPs/refs/heads/main/Corner%202D%20Box%20ESP.lua"))()
			isCornerLoaded = true
		elseif not v and isCornerLoaded and cornerESP and cornerESP.Destroy then
			cornerESP:Destroy()
			isCornerLoaded = false
		end
	end
})

ESPTab:CreateToggle({
	Name = "Skeleton ESP (External)",
	CurrentValue = false,
	Callback = function(v)
		if v and not isSkeletonLoaded then
			skeletonESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/Blissful4992/ESPs/refs/heads/main/SkeletonESP.lua"))()
			isSkeletonLoaded = true
		elseif not v and isSkeletonLoaded and skeletonESP and skeletonESP.Destroy then
			skeletonESP:Destroy()
			isSkeletonLoaded = false
		end
	end
})
